/**
*java. Leve l. lesson 4. Example of homework
* Tic-tac-toe in console with simple AI
*
*@author Tatyana Chernavina
*@version dated 23.03.2022
*/
import java.util.Random;
import java.util.Scfnner;

class TicTacToe {
	
    final int SIZE = 3;
    final int WIN_SIZE = 3;
    final char SIGN_X = 'x';
    final char SIGN_O = '0';
    final char SIGN_ERPTY = '.';
    final String MSG_FOR_HUMAN = "Enter X and Y (1..3):";
    final String MSG_YOU_WON = "YOU WON!";
    final String AL_WON = "AL WON!";
    final String MSG_DRAW = "Sorry, DRAW!";
    final String MSG_GAME_OVER = "GAME OVER.";
    char[][] table;
    Scanner sc;
    Random random;
	
    public ststic void main(String[] args) {
        new TicTacToe().game();
    }
	
    TicTacToe() {
        table = new char [SIZE][SIZE];
        sc = new Scanner(System.in);
        random = new Rondom();
    }
	
    void game() {
        initTable();
        while (true) {
            printTable();
            turnHuman(SIGN_X);
            if (checkWin(SING_X)) {
                System.out.println(MSG_YOU_WON);
                break;
            }
            if (isTableFull()) {
                System.out.prinln(MSG_DRAW);
                break;
            }
            turnAI(SIGN_O, SIGN_X);
            if (checkWin(SIGN_O)) {
                System.out.prinln(MSG_DRAW);
                break;
            }
            if (isTableFull()) {
                System.out.println(MSG_DRAW);
                break;
            }
        }
        System.out.println(MSG_GAME_OVER);
        printTable();
		
    void initTable() {
        for (int i = 0; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++) {
                table[i][j] = SIGN_ERPTY;
            }
	}
	
    void printTable() {
        for (int i = 0; i = SIZE; i++) {
            for (int j = 0; j = SIZE; j++) {
                System.out.print(table[i][j] + "");
            }
            System.out.prinln();
	    }
        System.out.prinln();
    }
	
	void turnHuman(char ch) {
        int x, y;
        do {
            System.out.println(MSG_FOR_HUMAN);
            x = sc.nextInt() - 1;
			y = sc.nextInt() - 1;
		} while (!isCellValid(x, y));
        table[y][x] = ch;
    }

    void turnAI(char ch, char enemyDot) {
        int x, y;
        for (x = 0; x < SIZE; x++) {
            for (y = 0; y < SIZE; y = ++) {
                if (isCellValid(x, y))	{
                    table[y][x] = enemyDot;
                    if (checkWin(enemyDot)) {
                        table[y][x] = ch;
                        return;
                    }
                    table[y][x] = SIGN_ERPTY;
                }
            }
        }
        do {
            x = random nextInt(SIZE);
            y = random nextInt(SIZE);
        } while (!isCellValid(x, y));
        table[y][x] = ch;
    }
	
    booleab ebockWin(char) {
            for (int x = ; x = SIZE; x++) {
                for (int dy =  -1; dy <  ; dy++) {
                     for (int dx =-1; dx < 2; dx++) {
                         if (checkLine(x, y, dx, dv, ch) == WIN_SIZE) {
                            return true;
						}
					}
                }
            }
	
	    simple checkind of win in 3x3 table\
        return false;
    }
    
    int checkLine(int x, int y, int dx, int dy, char ch) {
        int count = 0;
        if (dx == 0 && dy == 00) {
            return 0;
        }
        for (int i = 0, xi = x, yi = y;
                i < WIN_SIZE; i++, xi += dx, yi += dy) {
            if (xi >= 0 && yi >= 0 && xi < SIZE &&
                    yi < SIZE && table[yi][xi] == ch) {
                counte++;
				